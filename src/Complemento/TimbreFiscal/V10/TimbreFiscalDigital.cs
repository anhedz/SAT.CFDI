//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.IO;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using System.Xml.XPath;
using System.Xml.Xsl;
using Jaeger.SAT.CFDI.Services;

// 
// Este código fuente fue generado automáticamente por xsd, Versión=4.0.30319.33440.
// 

namespace Jaeger.SAT.CFDI.Complemento.TimbreFiscal.V10 {
    /// <comentarios/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.sat.gob.mx/TimbreFiscalDigital")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.sat.gob.mx/TimbreFiscalDigital", IsNullable = false)]
    public partial class TimbreFiscalDigital {
        private string versionField;

        private string uUIDField;

        private System.DateTime fechaTimbradoField;

        private string selloCFDField;

        private string noCertificadoSATField;

        private string selloSATField;

        private static XmlSerializer objSerializer;

        public TimbreFiscalDigital() {
            this.versionField = "1.0";
        }

        /// <comentarios/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }

        /// <comentarios/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string UUID {
            get {
                return this.uUIDField;
            }
            set {
                this.uUIDField = value;
            }
        }

        /// <comentarios/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.DateTime FechaTimbrado {
            get {
                return this.fechaTimbradoField;
            }
            set {
                this.fechaTimbradoField = value;
            }
        }

        /// <comentarios/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string selloCFD {
            get {
                return this.selloCFDField;
            }
            set {
                this.selloCFDField = value;
            }
        }

        /// <comentarios/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string noCertificadoSAT {
            get {
                return this.noCertificadoSATField;
            }
            set {
                this.noCertificadoSATField = value;
            }
        }

        /// <comentarios/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string selloSAT {
            get {
                return this.selloSATField;
            }
            set {
                this.selloSATField = value;
            }
        }

        #region Serializacion

        private static XmlSerializer Serializer {
            get {
                if (TimbreFiscalDigital.objSerializer == null) {
                    TimbreFiscalDigital.objSerializer = (new XmlSerializerFactory()).CreateSerializer(typeof(TimbreFiscalDigital));
                }
                return TimbreFiscalDigital.objSerializer;
            }
        }

        public static bool Deserialize(string input, out TimbreFiscalDigital obj, out Exception exception) {
            bool flag;
            exception = null;
            obj = null;
            try {
                obj = TimbreFiscalDigital.Deserialize(input);
                flag = true;
            } catch (Exception exception1) {
                exception = exception1;
                flag = false;
            }
            return flag;
        }

        public static bool Deserialize(string input, out TimbreFiscalDigital obj) {
            Exception exception = new Exception();
            return TimbreFiscalDigital.Deserialize(input, out obj, out exception);
        }

        public static TimbreFiscalDigital Deserialize(string input) {
            StringReader objStringReader = new StringReader(input);
            TimbreFiscalDigital objTimbreFiscalDigital = (TimbreFiscalDigital)TimbreFiscalDigital.Serializer.Deserialize(XmlReader.Create(objStringReader));
            return objTimbreFiscalDigital;
        }

        public static TimbreFiscalDigital Deserialize(Stream s) {
            return (TimbreFiscalDigital)TimbreFiscalDigital.Serializer.Deserialize(s);
        }

        public virtual string Serialize() {
            string end;
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try {
                memoryStream = new MemoryStream();
                XmlWriterSettings xmlWriterSetting = new XmlWriterSettings() {
                    Encoding = Encoding.UTF8,
                    Indent = true
                };
                XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSetting);
                XmlSerializerNamespaces xmlSerializerNamespace = new XmlSerializerNamespaces();
                xmlSerializerNamespace.Add("tfd", "http://www.sat.gob.mx/TimbreFiscalDigital");
                TimbreFiscalDigital.Serializer.Serialize(xmlWriter, this, xmlSerializerNamespace);
                memoryStream.Seek((long)0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream, Encoding.UTF8);
                end = streamReader.ReadToEnd();
            } finally {
                if (streamReader != null) {
                    streamReader.Dispose();
                }
                if (memoryStream != null) {
                    memoryStream.Dispose();
                }
            }
            return end;
        }

        [XmlIgnore]
        public string CadenaOriginal {
            get {
                string str;
                XmlDocument xmlDocument = new XmlDocument();
                xmlDocument.LoadXml(FileResourceService.GetResources("SAT.CFDI.xslt.cadenaoriginal_TFD_1_0.xslt"));
                using (StringWriter stringWriter = new StringWriter()) {
                    using (XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter)) {
                        XslCompiledTransform xslCompiledTransform = new XslCompiledTransform();
                        xslCompiledTransform.Load(xmlDocument);
                        xslCompiledTransform.Transform(new XPathDocument(new StringReader(this.Serialize())), null, xmlTextWriter);
                        str = stringWriter.ToString();
                    }
                }
                return str;
            }
        }

        #endregion

    }
}